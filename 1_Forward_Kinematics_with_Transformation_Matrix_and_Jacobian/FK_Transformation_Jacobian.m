(* ::Package:: *)

(* ::Input:: *)
(*(*Author:Midhun Varghese*)
(*GitHub:https://github.com/midhun-varghese*)
(**)
(*This program is used to develop the forward kinematics of any serial manipulator from its DH Parameters.The associated transformation matrix and the Jacobian is also calculated. Both the translation Jacobian and Rotational Jacobian can be computed*)*)
(**)
(*(*In this example the DH parameters of the PUMA 560 Robot is specified*)*)
(**)
(*DOF = 6 ;*)
(**)
(*\[Alpha][0]=0;              a[0]=0;         d[1]=0;         \[Theta][1]=\[Theta][1];     jtype[1]=1;*)
(*\[Alpha][1]=-Pi/2;   a[1]=0;         d[2]=0;         \[Theta][2]=\[Theta][2];     jtype[2]=1;*)
(*\[Alpha][2]=0;              a[2]=Subscript[a, 2];       d[3]=Subscript[d, 3];      \[Theta][3]=\[Theta][3];     jtype[3]=1;*)
(*\[Alpha][3]=-Pi/2;   a[3]=Subscript[a, 3];       d[4]=Subscript[d, 4];      \[Theta][4]=\[Theta][4];     jtype[4]=1;*)
(*\[Alpha][4]=Pi/2;      a[4]=0;         d[5]=0;        \[Theta][5]=\[Theta][5];     jtype[5]=1;*)
(*\[Alpha][5]=-Pi/2;   a[5]=0;         d[6]=0;        \[Theta][6]=\[Theta][6];     jtype[6]=1;*)
(**)
(*(*TOOL TIP POSITION IN LAST LINK FRAME*)*)
(**)
(*pNT={{0},{0},{Subscript[z, T]}};*)
(**)
(*Print[" DH Parameters"] ;*)
(*Print["Link i    \[Alpha][i-1]    a[i-1]      d[i]      \[Theta][i]      J-type[i]"] ;*)
(*Print["-------------------------------------------------------------"] ;*)
(*For [ i=1, i<=DOF, i++,*)
(*    Print["  ",i,"         ", \[Alpha][i-1],"        ", a[i-1],"         ",d[i],*)
(*      "       ", \[Theta][i],"         ",jtype[i]]*)
(*    ] ;*)


(* ::Input:: *)
(*(*This section finds the local link transformations*)*)
(*For[i=1,i<=DOF,i++,*)
(*{ R[i]={{Cos[\[Theta][i]],-Sin[\[Theta][i]],0},*)
(*            {Sin[\[Theta][i]]*Cos[\[Alpha][i-1]],Cos[\[Theta][i]]*Cos[\[Alpha][i-1]],-Sin[\[Alpha][i-1]]},*)
(*            {Sin[\[Theta][i]]*Sin[\[Alpha][i-1]],Cos[\[Theta][i]]*Sin[\[Alpha][i-1]],Cos[\[Alpha][i-1]]}},p[i]={{a[i-1]},{-Sin[\[Alpha][i-1]]*d[i]},{Cos[\[Alpha][i-1]]*d[i]}} }*)
(*];*)
(*Print["LOCAL LINK TRANSFORMATIONS:"];*)
(**)
(*For[i=1,i<=DOF,i++,*)
(*Print["p[",i,"] =",MatrixForm[p[i]],"     R[",i,"] =",MatrixForm[R[i]]]*)
(*];*)
(*Print["pNT = ",MatrixForm[pNT]] ;*)
(**)


(* ::Input:: *)
(*(*This section finds the Forward Kinematics of the specified manipulator*)*)
(*W[0]=IdentityMatrix[3];*)
(*x[0]={{0},{0},{0}};*)
(*For[i=1,i<=DOF,i++,*)
(*{W[i]=W[i-1].R[i],*)
(*dx[i]=W[i-1].p[i],*)
(*x[i]=x[i-1]+dx[i]}*)
(*];*)
(*W[DOF]=Simplify[W[DOF]];*)
(*p0T=x[DOF]+W[DOF].pNT;*)
(*p0T=Simplify[p0T];*)
(**)
(*(*  assume that tool frame is coincident with end-effector frame, i.e. RNT=I *)*)
(**)
(*R0T = W[DOF] ;*)
(*R0T = Simplify[R0T] ;*)
(**)
(*Print["FORWARD KINEMATICS:"];*)
(**)
(*For[i=1,i<=3,i++,*)
(*Print["p0T[",i,"] = ",p0T[[i,1]]]*)
(*];*)
(*For[i=1,i<=3,i++,*)
(*For[j=1,j<=3,j++,*)
(*Print["R0T[",i,",",j,"] = ",R0T[[i,j]]]*)
(*]*)
(*];*)


(* ::Input:: *)
(* (*This section is used to verify the forward kinematics that has been generated*)*)
(*(*  Input link lengths and offsets (meters)  *)*)
(**)
(*p0Ttest = p0T /.{Subscript[a, 2]->0.43181,Subscript[a, 3]->0.02032,Subscript[d, 3]->0.12446,Subscript[d, 4]->0.43181,Subscript[z, T]->0} ;*)
(*R0Ttest = R0T /.{Subscript[a, 2]->0.43181,Subscript[a, 3]->0.02032,Subscript[d, 3]->0.12446,Subscript[d, 4]->0.43181,Subscript[z, T]->0} ;*)
(**)
(*(*  Set joint angles to home position (configuration in Figure 3.18)  *)*)
(**)
(*p0Ttest = p0Ttest /.{\[Theta][1]->0,\[Theta][2]->0,\[Theta][3]->0,\[Theta][4]->0,\[Theta][5]->0,\[Theta][6]->0} ;*)
(*R0Ttest = R0Ttest /.{\[Theta][1]->0,\[Theta][2]->0,\[Theta][3]->0,\[Theta][4]->0,\[Theta][5]->0,\[Theta][6]->0} ;*)
(*Print["p0T = ",MatrixForm[p0Ttest]] ;*)
(*Print["R0T = ",MatrixForm[R0Ttest]] ;*)
(**)


(* ::Input:: *)
(*(*This section is used to find the translation Jacobian in base frame. Differetiation method is used to compute the same*)*)
(*(* set up the joint variable vector  *)*)
(*For[ i=1, i<=DOF, i++,*)
(*  q[i] = \[Theta][i]*jtype[i] + d[i]*(1-jtype[i])*)
(*  ] ;*)
(*  *)
(*(* the jth column of the translational Jacobian is given by the partial of the tool position with respect to the jth joint variable *)*)
(**)
(*J0t = Table[0,{3},{DOF}] ;*)
(*For[ i=1, i<=3, i++,*)
(*  For[ j=1, j<=DOF, j++,*)
(*    J0t[[i,j]] = D[Part[p0T,i,1],q[j]]*)
(*  ]*)
(*] ;*)
(*J0t = Simplify[Expand[J0t]] ;*)
(**)
(*Print["TRANSLATIONAL JACOBIAN (BASE FRAME):"] ;*)
(*For [ i=1, i<=3, i++,*)
(*  For [ j=1, j<=DOF, j++,*)
(*        Print["J0t[",i,",",j,"] = ",J0t[[i,j]]]*)
(*  ]*)
(*] ;*)


(* ::Input:: *)
(*(*This section finds the rotation Jacobian in the base frame:*)
(*for revolute joint j - the jth column of the rotational Jacobian is given by the third column of Roj=W[j]*)
(*for prismatic joint j - the jth column of the roatational Jacobian is the zero vector*)*)
(*J0r = Table[0,{3},{DOF}] ;*)
(*For[ i=1, i<=3, i++,*)
(*  For[ j=1, j<=DOF, j++,*)
(*    J0r[[i,j]] = Part[W[j],i,3] * jtype[j]*)
(*  ]*)
(*] ;*)
(*J0r = Simplify[J0r] ;*)
(**)
(*Print["ROTATIONAL JACOBIAN (BASE FRAME):"] ;*)
(**)
(*For [ i=1, i<=3, i++,*)
(*      For [ j=1, j<=DOF, j++,*)
(*            Print["J0r[",i,",",j,"] = ",J0r[[i,j]]]*)
(*          ]*)
(*    ] ;*)


(* ::Input:: *)
(*(*  This section combines the J0t and J0r to get 6x6 J0  *)*)
(*J0 = Table[0,{6},{DOF}] ;*)
(*For[ i=1, i<=3, i++,*)
(*  For[ j=1, j<=DOF, j++,*)
(*    { J0[[i,j]] = J0t[[i,j]] ,*)
(*J0[[i+3,j]] = J0r[[i,j]] }*)
(*  ]*)
(*] ;*)
(**)
(*(*  Input link lengths and offsets (meters)  *)*)
(**)
(*J0test = J0 /.{Subscript[a, 2]->0.43181,Subscript[a, 3]->0.02032,Subscript[d, 3]->0.12446,Subscript[d, 4]->0.43181,Subscript[z, T]->0.2} ;*)
(**)
(*(*  Set joint angles to random position  *)*)
(**)
(*J0test = J0test /.{\[Theta][1]->0.2,\[Theta][2]->-1.3,\[Theta][3]->0.8,\[Theta][4]->1.2,\[Theta][5]->-0.6,\[Theta][6]->1.9} ;*)
(*Print["J0 = ",MatrixForm[J0test]] ;*)
(**)
(*(*  Find the determinant of J0 and check the rank to see if it's singular. This can be used to determine singularities*)*)
(**)
(*detJ0 = Det[J0test] ;*)
(*Print["detJ0 = ",detJ0] ;*)
(*rankJ0 = MatrixRank[J0test] ;*)
(*Print["rankJ0 = ",rankJ0] ;*)
(**)



